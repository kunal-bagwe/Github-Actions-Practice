name: Integration Test WF

on: 
  push:
    branches:
      - test
  pull_request:
    types: [ labeled ]
    branches:
      - master
env:
  KIND_URL: https://kind.sigs.k8s.io/dl
  KIND_VER: v0.8.1
  KIND_ENV: kind-linux-amd64

jobs:
  integration-test:
    if: ${{ github.event.label.name == 'kafka' }}
  #  if: "contains(github.event.pull_request.labels.*.name, 'kafka')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the current repo
        uses: actions/checkout@v1
      - name: Clone the fission repository
        run: |
          git clone https://github.com/fission/keda-connectors.git
      - name: Install Tool
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.8.1/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/bin/
      - name: Run Kind Cluster
        run: |
          ./registry.sh
          helm repo add kedacore https://kedacore.github.io/charts
          helm repo update
          kubectl create namespace keda
          helm install keda kedacore/keda --namespace keda
      - name: Create Docker Image for HTTP server
        run: |
          cd server/
          docker build -t localhost:5000/http-server:latest .
          docker push localhost:5000/http-server:latest
      - name: Create Docker Image for KEDA Connector
        run: |
          cd keda-connectors/kafka-http-connector/
          docker build -t localhost:5000/kafka-connector:latest .
          docker push localhost:5000/kafka-connector:latest
      - name: Create Docker Image for Consumer
        run: |
          cd consumer/
          docker build -t localhost:5000/consumer:latest .
          docker push localhost:5000/consumer:latest
      - name: Deploy Kafka cluster
        run: |
          cd kafka/
          kubectl create namespace kafka
          curl -L http://strimzi.io/install/latest | sed 's/namespace: .*/namespace: kafka/' | kubectl apply -f - -n kafka
          sleep 10s
          kubectl apply -f kafka-cluster.yaml
          echo "Kafka Cluster is getting up."
          kubectl wait -f kafka-cluster.yaml --for=condition=ready --timeout=-1s -n kafka
          sleep 2m
          kubectl get pods -n kafka
          kubectl wait pod -l app.kubernetes.io/name=zookeeper --for=condition=ready --timeout=-1s -n kafka
      - name: Create Kafka topics
        run: |
          cd kafka/
          kubectl apply -f kafka-req-topic.yaml 
          kubectl apply -f kafka-err-topic.yaml
          kubectl apply -f kafka-res-topic.yaml
      - name: Bring up HTTP Server
        run: |
          cd server/
          kubectl apply -f server.yaml
          kubectl wait pod -l app=http --for=condition=ready --timeout=-1s -n kafka
      - name: Deploy Keda Connector and Keda ScaledObject
        run: |
          cd kafka/ 
          kubectl apply -f keda-deployment.yml
          kubectl get pods -n kafka
          docker images
          sleep 15s
          kubectl get pods -n kafka
          kubectl wait pod -l keda=kafka --for=condition=ready --timeout=30s -n kafka
          kubectl apply -f Keda-ScaledObj.yml 
      - name: Produce messages Using Producer
        run: |
          cd kafka/
          kubectl apply -f job.yaml -n kafka
          kubectl wait -f job.yaml --for=condition=complete --timeout=-1s -n kafka
          kubectl delete job pi -n kafka
      - name: Collect Consumer Messages
        run: |
          kubectl get pods -n kafka
          cd consumer/
          kubectl apply -f consumer-deployment.yaml
          kubectl wait pod -l app=consumer --for=condition=ready --timeout=-1s -n kafka
          kubectl logs -l app=consumer --all-containers=true -n kafka
  test:
    if: ${{ github.event.label.name == 'rabbitmq' }}
   # if: "contains(github.event.pull_request.labels.*.name, 'rabbitmq'|| 'RABBITMQ'|| 'RabbitMQ')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the current repo
        uses: actions/checkout@v1
      - name: Install Tool
        run: |
          curl -Lo ./kind ${{env.KIND_URL}}/${{env.KIND_VER}}/${{env.KIND_ENV}}
          chmod +x ./kind
          sudo mv ./kind /usr/bin/
      - name: Clone the fission repository
        run: |
          git clone https://github.com/fission/keda-connectors.git
      - name: Run Kind Cluster
        run: |
          ./registry.sh
          helm repo add kedacore https://kedacore.github.io/charts
          helm repo update
          kubectl create namespace keda
          helm install keda kedacore/keda --namespace keda
      - name: Create Docker Image for HTTP server
        run: |
          cd server/
          docker build -t localhost:5000/http-server:latest .
          docker push localhost:5000/http-server:latest
      - name: Create Docker Image for KEDA Connector
        run: |
          cd keda-connectors/rabbitmq-http-connector/
          docker build -t localhost:5000/rabbit-keda:latest .
          docker push localhost:5000/rabbit-keda:latest
      - name: Create Docker Image for Publisher
        run: |
          cd rabbitmq/publisher/
          docker build -t localhost:5000/rabbit-publisher:latest .
          docker push localhost:5000/rabbit-publisher:latest
      - name: Create Docker Image for Consumer
        run: |
          cd rabbitmq/consumer/
          docker build -t localhost:5000/rabbit-consumer:latest .
          docker push localhost:5000/rabbit-consumer:latest
      - name: Deploy Rabbitmq Deployment files
        run: |
          cd rabbitmq/kubernetes/
          kubectl create ns rabbits
          kubectl apply -n rabbits -f rabbit-rbac.yaml
          kubectl apply -n rabbits -f rabbit-configmap.yaml
          kubectl apply -n rabbits -f rabbit-secret.yaml
          kubectl apply -n rabbits -f rabbit-statefulset.yaml
          bash test.sh
          docker images  | grep 'localhost'
      - name: Bring up HTTP Server
        run: |
          cd server/
          kubectl apply -f server.yaml -n rabbits
          kubectl wait pod -l app=http --for=condition=ready --timeout=-1s -n rabbits
      - name: Publish messages in a queue
        run: |
          cd rabbitmq/publisher/
          kubectl apply -f deployment.yaml
      - name: Bring up the consumer queue and Listen for incoming messages
        run: |
          cd rabbitmq/consumer/
          kubectl apply -f consumer-deployment.yaml
      - name: Deploy Keda Connector and Keda ScaledObject
        run: |
          cd rabbitmq/kubernetes/
          kubectl apply -f keda-deployment.yml
          sleep 30s
          kubectl logs deployment.apps/keda-deployment -n rabbits
          kubectl wait pod -l keda=rabbitmq --for=condition=ready --timeout=-1s -n rabbits
          kubectl get pods -n rabbits
          kubectl logs deployment.apps/keda-deployment -n rabbits
          kubectl apply -f Keda-ScaledObj.yml
      - name: Get consumed messages from queue
        run: |
          sleep 10s
          kubectl logs -l app=rabbitmq-consumer -n rabbits
